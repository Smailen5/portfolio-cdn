name: Sync Files from Monorepo

on:
  # Trigger quando c'è un push sul main della monorepo
  repository_dispatch:
    types: [monorepo-updated]

  # Trigger manuale per test
  workflow_dispatch:
    inputs:
      monorepo_branch:
        description: 'Branch della monorepo da sincronizzare'
        required: true
        default: 'main'

jobs:
  sync-files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout CDN repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Clone monorepo
        run: |
          # Per trigger manuale, usa il nome fisso della monorepo
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            MONOREPO_NAME="Frontend-Mentor-Challenge"
            MONOREPO_OWNER="Smailen5"
            BRANCH="${{ github.event.inputs.monorepo_branch || 'main' }}"
          else
            # Per trigger automatico, usa il payload
            MONOREPO_NAME="${{ github.event.client_payload.monorepo || 'Frontend-Mentor-Challenge' }}"
            MONOREPO_OWNER="${{ github.repository_owner }}"
            BRANCH="${{ github.event.client_payload.branch || 'main' }}"
          fi

          echo "Clonando monorepo: $MONOREPO_OWNER/$MONOREPO_NAME"
          echo "Branch: $BRANCH"
          git clone https://github.com/$MONOREPO_OWNER/$MONOREPO_NAME.git temp-monorepo
          cd temp-monorepo
          git checkout $BRANCH
          echo "✅ Monorepo clonata e checkout completato"

      - name: Debug monorepo structure
        run: |
          echo "📁 Struttura della monorepo:"
          find temp-monorepo -maxdepth 3 -type d | head -20
          echo ""
          echo "📄 File projects.json:"
          find temp-monorepo -name "projects.json" -type f
          echo ""
          echo "📸 Cartelle immagini:"
          find temp-monorepo -path "*/screen-capture*" -type d
          echo ""
          echo "📸 Contenuto screen-capture:"
          ls -la temp-monorepo/screen-capture/ 2>/dev/null || echo "Cartella screen-capture non trovata"

      - name: Copy projects.json
        run: |
          echo "📁 Copiando projects.json da public/"
          echo "🔍 Controllo se il file esiste:"
          ls -la temp-monorepo/public/ || echo "Cartella public non esiste"
          echo "🔍 Contenuto della cartella public:"
          find temp-monorepo/public/ -name "*.json" 2>/dev/null || echo "Nessun file JSON trovato"

          if [ -f "temp-monorepo/public/projects.json" ]; then
            echo "📄 File trovato, procedo con la copia"
            cp temp-monorepo/public/projects.json public/
            echo "✅ projects.json copiato con successo"
            ls -la public/projects.json
          else
            echo "❌ File projects.json non trovato in temp-monorepo/public/"
            echo "🔍 Struttura completa della monorepo:"
            find temp-monorepo -name "projects.json" -type f
            exit 1
          fi

      - name: Copy full images
        run: |
          echo "📸 Copiando immagini da screen-capture/full-images/"
          if [ -d "temp-monorepo/screen-capture/full-images" ]; then
            # Rimuovi i file esistenti (tranne .gitkeep)
            find public/images/full/ -name "*.webp" -delete 2>/dev/null || true
            # Copia tutte le immagini
            cp temp-monorepo/screen-capture/full-images/*.webp public/images/full/ 2>/dev/null || echo "⚠️ Nessuna immagine full trovata"
            echo "✅ Immagini da full-images copiate"
            echo "📊 Numero di immagini copiate:"
            ls public/images/full/*.webp 2>/dev/null | wc -l || echo "0"
          else
            echo "❌ Cartella full-images non trovata"
          fi

      - name: Copy preview images
        run: |
          echo "📸 Copiando immagini di anteprima da screen-capture/preview/"
          if [ -d "temp-monorepo/screen-capture/preview" ]; then
            # Rimuovi i file esistenti (tranne .gitkeep)
            find public/images/previews/ -name "*.webp" -delete 2>/dev/null || true
            # Copia tutte le immagini
            cp temp-monorepo/screen-capture/preview/*.webp public/images/previews/ 2>/dev/null || echo "⚠️ Nessuna immagine di anteprima trovata"
            echo "✅ Immagini da preview copiate"
            echo "📊 Numero di immagini copiate:"
            ls public/images/previews/*.webp 2>/dev/null | wc -l || echo "0"
          else
            echo "❌ Cartella preview non trovata"
          fi

      - name: Check for changes
        id: check-changes
        run: |
          echo "🔍 Controllo cambiamenti..."
          echo "📁 File in public/:"
          ls -la public/
          echo ""
          echo "📸 File in public/images/:"
          ls -la public/images/
          echo ""
          echo "📸 File in public/images/full/:"
          ls -la public/images/full/ | head -5
          echo ""
          echo "📸 File in public/images/previews/:"
          ls -la public/images/previews/ | head -5
          echo ""
          echo "🔍 Git status:"
          git status
          echo ""
          echo "🔍 Git diff:"
          git diff --name-only
          echo ""
          if git diff --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "Nessun cambiamento rilevato"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Cambiamenti rilevati, procedo con il commit"
          fi

      - name: Commit and push changes
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          git add .
          git commit -m "🔄 Sync files from monorepo - $(date '+%Y-%m-%d %H:%M:%S')"
          git push

      - name: Cleanup
        if: always()
        run: |
          rm -rf temp-monorepo

      - name: Notify success
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          echo "✅ File sincronizzati con successo!"
          echo "📁 projects.json aggiornato"
          echo "🖼️ Immagini di anteprima aggiornate"
